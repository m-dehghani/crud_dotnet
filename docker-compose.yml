services:
  
  mc2.crudtest.presentation.server:
    container_name: customer-service
    hostname: customer-service
    image: ${DOCKER_REGISTRY-}mc2crudtestpresentationserver
    depends_on:
      - redis
      - kafka
      - db
    build:
      context: .
      dockerfile: Mc2.CrudTest.Presentation/Server/Dockerfile

      
  kafka:
    image: 'bitnami/kafka:latest'
    ports:
        - '9092:9092'
    environment:
        - KAFKA_CFG_NODE_ID=0
        - KAFKA_CFG_PROCESS_ROLES=controller,broker
        - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
        - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
        - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
        - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
        - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    
    volumes:
      - "kafka_data:/bitnami"
    
  redis:
    container_name: redis
    hostname: redis
    image: redis/redis-stack:latest
    ports:
      - 6379:6379
      - 8001:8001
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
    volumes:
      - redis_data:/data
  db:
    container_name: postgres
    hostname: postgres
    
    image: postgres
    restart: always
    
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB= customers 
      - PGDATA= /data/postgres 
    ports:
      - '5432:5432'
    volumes: 
      - db:/var/lib/postgresql/data
    
  adminer:
    container_name: adminer
    hostname: adminer
    image: adminer
    restart: always
    ports:
      - 8080:8080
 
volumes:
  db:
    driver: local
  kafka_data:
    driver: local
  redis_data:
   
 
  