// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AcceptanceTest.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class CustomerManagerFeature : object, Xunit.IClassFixture<CustomerManagerFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private static global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Customer.feature"
#line hidden
        
        public CustomerManagerFeature(CustomerManagerFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(null, global::Reqnroll.xUnit.ReqnrollPlugin.XUnitParallelWorkerTracker.Instance.GetWorkerId());
            global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Customer Manager;", "As a an operator I wish to be able to Create, Update, Delete customers and list a" +
                    "ll customers", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            string testWorkerId = testRunner.TestWorkerId;
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
            global::Reqnroll.xUnit.ReqnrollPlugin.XUnitParallelWorkerTracker.Instance.ReleaseWorker(testWorkerId);
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="User can Create, Edit, Delete, and Read customer records")]
        [Xunit.TraitAttribute("FeatureTitle", "Customer Manager;")]
        [Xunit.TraitAttribute("Description", "User can Create, Edit, Delete, and Read customer records")]
        [Xunit.TraitAttribute("Category", "mytag")]
        public async System.Threading.Tasks.Task UserCanCreateEditDeleteAndReadCustomerRecords()
        {
            string[] tagsOfScenario = new string[] {
                    "mytag"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("User can Create, Edit, Delete, and Read customer records", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                            "Code",
                            "Description"});
                table1.AddRow(new string[] {
                            "101",
                            "Invalid Email"});
                table1.AddRow(new string[] {
                            "102",
                            "Invalid Phonenumber"});
                table1.AddRow(new string[] {
                            "103",
                            "Invalid BankAccountNumber"});
                table1.AddRow(new string[] {
                            "201",
                            "Duplicated Email Address"});
                table1.AddRow(new string[] {
                            "202",
                            "Duplicated Firstname, Lastname"});
#line 8
 await testRunner.GivenAsync("platform support following error codes", ((string)(null)), table1, "Given ");
#line hidden
#line 17
 await testRunner.GivenAsync("platform has \"0\" record of customers", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table2 = new global::Reqnroll.Table(new string[] {
                            "Email",
                            "BankAccountNumber",
                            "Firstname",
                            "Lastname",
                            "DateOfBirth",
                            "Phonenumber"});
                table2.AddRow(new string[] {
                            "john.doe@email.com",
                            "NL91RABO0312345678",
                            "john",
                            "doe",
                            "19-JUN-1999",
                            "+989087645543"});
#line 19
 await testRunner.WhenAsync("When user send command to create new customer with following information", ((string)(null)), table2, "When ");
#line hidden
                global::Reqnroll.Table table3 = new global::Reqnroll.Table(new string[] {
                            "Email",
                            "BankAccountNumber",
                            "Firstname",
                            "Lastname",
                            "DateOfBirth",
                            "Phonenumber"});
                table3.AddRow(new string[] {
                            "john.doe@email.com",
                            "NL91RABO0312345678",
                            "john",
                            "doe",
                            "19-JUN-1999",
                            "+989087645543"});
#line 23
 await testRunner.ThenAsync("user can send query and receive \"1\" record of customer with following data", ((string)(null)), table3, "Then ");
#line hidden
                global::Reqnroll.Table table4 = new global::Reqnroll.Table(new string[] {
                            "Email",
                            "BankAccountNumber",
                            "Firstname",
                            "Lastname",
                            "DateOfBirth",
                            "Phonenumber"});
                table4.AddRow(new string[] {
                            "john.smith@email.com",
                            "NL91RABO0312345679",
                            "john",
                            "smith",
                            "19-JUN-1999",
                            "+989087645541"});
#line 27
 await testRunner.WhenAsync("user send command to update customer with email of \"john.doe@email.com\" and with " +
                        "below information", ((string)(null)), table4, "When ");
#line hidden
                global::Reqnroll.Table table5 = new global::Reqnroll.Table(new string[] {
                            "Code"});
                table5.AddRow(new string[] {
                            "202"});
                table5.AddRow(new string[] {
                            "102"});
#line 31
  await testRunner.ThenAsync("user should receive following error codes", ((string)(null)), table5, "Then ");
#line hidden
                global::Reqnroll.Table table6 = new global::Reqnroll.Table(new string[] {
                            "Email",
                            "BankAccountNumber",
                            "Firstname",
                            "Lastname",
                            "DateOfBirth",
                            "Phonenumber"});
                table6.AddRow(new string[] {
                            "john.smith@email.com",
                            "NL91RABO0312345679",
                            "john",
                            "smith",
                            "19-JUN-1999",
                            "+989087645541"});
#line 36
 await testRunner.ThenAsync("user can send query and receive \"1\" record of customer with following data", ((string)(null)), table6, "Then ");
#line hidden
                global::Reqnroll.Table table7 = new global::Reqnroll.Table(new string[] {
                            "Email",
                            "BankAccountNumber",
                            "Firstname",
                            "Lastname",
                            "DateOfBirth",
                            "Phonenumber"});
                table7.AddRow(new string[] {
                            "john.doe@email.com",
                            "NL91RABO0312345678",
                            "john",
                            "doe",
                            "19-JUN-1999",
                            "+989087645543"});
#line 40
  await testRunner.AndAsync("user can send query and receive \"0\" record of customer with following data", ((string)(null)), table7, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await CustomerManagerFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await CustomerManagerFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
