@page "/update-customer/{Id}"
@implements IDisposable
@inject NavigationManager NavigationManager
@inject ILogger<CustomerUpdate> Logger
@inject ICustomerService CustomerService
@using System.ComponentModel.DataAnnotations
@using Mc2.CrudTest.Presentation.Client.Models
@using Mc2.CrudTest.Presentation.Client.services
@using Mc2.CrudTest.Presentation.Shared.ValueObjects
@using System.Diagnostics
@using System.Text.Json


    <h3>Update the Customer</h3>
<EditForm EditContext="editContext" OnValidSubmit="UpdateCustomer" FormName="CustomerUpdate">
        <DataAnnotationsValidator />
    
        <div class="form-group">
            <label for="firstName">First Name</label>
            <InputText id="firstName" @bind-Value="Model!.FirstName" class="form-control" />
            <ValidationMessage For="() => Model!.FirstName" />
        </div>
        <div class="form-group">
            <label for="lastName">Last Name</label>
            <InputText id="lastName" @bind-Value="Model!.LastName" class="form-control" />
            <ValidationMessage For="() => Model!.LastName" />
        </div>
        <div class="form-group">
            <label for="email">Email</label>
            <InputText id="email" @bind-Value="Model!.Email" class="form-control" />
            <ValidationMessage For="() => Model!.Email" />
        </div>
        <div class="form-group">
            <label for="phoneNumber">Phone Number</label>
            <InputText id="phoneNumber" @bind-Value="Model!.PhoneNumber" class="form-control" />
            <ValidationMessage For="() => Model!.PhoneNumber" />
        </div>
        <div class="form-group">
            <label for="dateOfBirth">DateOfBirth</label>
            <InputDate id="dateOfBirth" @bind-Value="Model!.DateOfBirth" class="form-control" />
            <ValidationMessage For="() => Model!.DateOfBirth" />
        </div>

        <div class="form-group">
            <label for="bankAccount">BankAccount</label>
            <InputText id="bankAccount" @bind-Value="Model!.BankAccount" class="form-control" />
            <ValidationMessage For="() => Model!.BankAccount" />
        </div>
    <br />
    <button type="submit" class="btn btn-primary">Update</button> <div class="text-danger">@CustomerService.GetErrors().LastOrDefault()</div>
    </EditForm>
 
@code {
    [Parameter]
    public string Id { get; set; }

    private EditContext? editContext;

    

    private async Task UpdateCustomer()
    {
      

        Logger.LogInformation("sending start: sending the form to customer controller");
       
        await CustomerService.Update(Model);

       
    }

    private void Submit()
    {
        Logger.LogInformation("Submit called: Processing the form");
    }

    [SupplyParameterFromForm]
    private CustomerUpdateModel? Model { get; set; }

    private ValidationMessageStore? messageStore;
    
    protected override async void OnInitialized()
    {
       
        Model = new(); 
        editContext = new(Model);
        editContext.OnValidationRequested += HandleValidationRequested;
        messageStore = new(editContext);
        var model = await CustomerService.Get(new Guid(Id));
        Model = model;
        StateHasChanged();
    }
    private void HandleValidationRequested(object? sender,
       ValidationRequestedEventArgs args)
    {
        messageStore?.Clear();

        try
        {
            _ = new Email(Model.Email);
        }
        catch
        {
            messageStore?.Add(() => Model.Email, "Enter valid email");
        }
        try
        {
            _ = new BankAccount(Model.BankAccount);
        }
        catch
        {
            messageStore?.Add(() => Model.BankAccount, "Enter valid Bank Account");
        }


    }

    public void Dispose()
    {
        if (editContext is not null)
        {
            editContext.OnValidationRequested -= HandleValidationRequested;
        }
    }
}
