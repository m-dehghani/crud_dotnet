<!-- CustomerList.razor -->
@using Mc2.CrudTest.Presentation.Client.services
@using Mc2.CrudTest.Presentation.Shared.ViewModels
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ILogger<CustomerView> Logger
@inject IJSRuntime JsRuntime
@inject ICustomerService CustomerService
@page "/customers"

@if (Customers == null)
{
    <div class="spinner"></div>
}
else
{
    <a class="btn btn-success" href="create-customer">New Customer</a>
    <table class="table table-striped">
        <thead class="thead thead-dark">
            <tr>
                <th>History</th>
                <th>Changes #</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Email</th>
                <th>Phone Number</th>
                <th>Date Of Birth</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (CustomerViewModel? customer in Customers)
            {
                <tr>
                    <td>@string.Join('\n', customer.History)</td>
                    <td>@(customer.History.Length - 1)</td>
                    <td>@customer.FirstName</td>
                    <td>@customer.LastName</td>
                    <td>@customer.Email</td>
                    <td>@customer.PhoneNumber</td>
                    <td>@customer.DateOfBirth</td>

                    <td>
                        <button class="btn btn-link text-success" @onclick="() => GetCustomerHistory(customer)">
                            <i class="bi bi-pencil"></i> History
                        </button>
                        <button class="btn btn-link" @onclick="() => UpdateCustomer(customer)">
                            <i class="bi bi-pencil"></i> Edit
                        </button>
                        <button class="btn btn-link text-danger" @onclick="() => DeleteCustomer(customer)">
                            <i class="bi bi-trash"></i> Delete
                        </button>

                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    private List<CustomerViewModel>? Customers { get; set; }

    protected override async Task OnInitializedAsync()
    {

        Customers = await CustomerService.GetAll();
        StateHasChanged();
    }

    private void UpdateCustomer(CustomerViewModel customer)
    {
        NavigationManager.NavigateTo($"update-customer/{customer.Id}");
    }

    private async Task DeleteCustomer(CustomerViewModel customer)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
        if (confirmed)
        {
            await CustomerService.Delete(customer.Id);
            StateHasChanged();
        }
    }

    private void GetCustomerHistory(CustomerViewModel customer)
    {
        NavigationManager.NavigateTo($"history-customer/{customer.Id}");
    }
}