<!-- CustomerList.razor -->
@using Mc2.CrudTest.Presentation.Client.services
@using Mc2.CrudTest.Presentation.Shared.Entities
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ILogger<CustomerView> Logger
@inject IJSRuntime JsRuntime
@inject ICustomerService CustomerService
@page "/customers"

<h3>Customer List</h3>
@if (Customers == null)
{
    <p>Loading customer data...</p>
}
else
{
<a class="btn btn-danger" href="create-customer">New Customer</a>
<table class="table">
    <thead>
    <tr>
        <th>History</th>
        <th>First Name</th>
        <th>Last Name</th>
        <th>Email</th>
        <th>Phone Number</th>
        <th>Date Of Birth</th>
        <th>Actions</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var customer in Customers)
    {
        <tr>
            <td>@string.Join('\n', customer.History)</td>
            <td>@customer.FirstName</td>
            <td>@customer.LastName</td>
            <td>@customer.Email</td>
            <td>@customer.PhoneNumber</td>
            <td>@customer.DateOfBirth</td>
            
            <td>
                <button class="btn btn-link" @onclick="() => UpdateCustomer(customer)">
                    <i class="bi bi-pencil"></i> Edit
                </button>
                <button class="btn btn-link text-danger" @onclick="() => DeleteCustomer(customer)">
                    <i class="bi bi-trash"></i> Delete
                </button>
            </td>
        </tr>
    }
    </tbody>
</table>
}
@code {
    private List<ViewModels.CustomerViewModel>? Customers { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("init customers list page");

        Customers = await CustomerService.GetAll();
        StateHasChanged();
    }

    private async Task UpdateCustomer(ViewModels.CustomerViewModel customer)
    {
        NavigationManager.NavigateTo($"update-customer/{customer.Id}");
    }

    private async Task DeleteCustomer(ViewModels.CustomerViewModel customer)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
        if (confirmed)
        {
            await CustomerService.Delete(customer.Id);
            StateHasChanged();
        }
    }
}