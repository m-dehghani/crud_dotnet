<!-- CreateCustomer.razor -->
@page "/create-customer"
@implements IDisposable
@using System.ComponentModel.DataAnnotations
@using Mc2.CrudTest.Presentation.Shared.ValueObjects
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ILogger<CustomerUpdate> Logger


<h3>Create New Customer</h3>

<EditForm EditContext="editContext"   OnValidSubmit="CreateCustomer" FormName="CustomerCreate">
    <DataAnnotationsValidator />
    
    <div class="form-group">
        <label for="firstName">First Name</label>
        <InputText id="firstName" @bind-Value="Model!.FirstName" class="form-control" />
        <ValidationMessage For="() => Model!.FirstName" />
    </div>
    <div class="form-group">
        <label for="lastName">Last Name</label>
        <InputText id="lastName" @bind-Value="Model!.LastName" class="form-control" />
        <ValidationMessage For="() => Model!.LastName" />
    </div>
    <div class="form-group">
        <label for="email">Email</label>
        <InputText id="email" @bind-Value="Model!.Email" class="form-control" />
        <ValidationMessage For="() => Model!.Email" />
    </div>
    <div class="form-group">
        <label for="phoneNumber">Phone Number</label>
        <InputText id="phoneNumber" @bind-Value="Model!.PhoneNumber" class="form-control" />
        <ValidationMessage For="() => Model!.PhoneNumber" />
    </div>
    <div class="form-group">
        <label for="dateOfBirth">DateOfBirth</label>
        <InputDate id="dateOfBirth" @bind-Value="Model!.DateOfBirth" class="form-control" />
        <ValidationMessage For="() => Model!.DateOfBirth" />
    </div>

    <div class="form-group">
        <label for="bankAccount">BankAccount</label>
        <InputText id="bankAccount" @bind-Value="Model!.BankAccount" class="form-control" />
        <ValidationMessage For="() => Model!.BankAccount" />
    </div>

    <button type="submit" class="btn btn-primary">Create</button> <div class="text-danger">@_errorMessage</div>
</EditForm>



@code {

    private EditContext? editContext;

    private string _errorMessage = "";
    private async Task CreateCustomer()
    {
        try
        {
            Logger.LogInformation("sending start: sending the form to customer controller");
           
            var result = await Http.PostAsJsonAsync("Customer", Model);
            if (result.IsSuccessStatusCode)
                NavigationManager.NavigateTo("customers");
            else
                _errorMessage = await result.Content.ReadAsStringAsync();
           
        }

        catch (Exception ex)
        {
            _errorMessage += "An error has been occured. Please try again later.";
        }
    }

    private void Submit()
    {
        Logger.LogInformation("Submit called: Processing the form");
    }

    [SupplyParameterFromForm]
    private CustomerCreateModel? Model { get; set; }

    private ValidationMessageStore? messageStore;

    protected override void OnInitialized()
    {
        Model ??= new();
        editContext = new(Model);
        editContext.OnValidationRequested += HandleValidationRequested;
        messageStore = new(editContext);
    }



    private void HandleValidationRequested(object? sender,
       ValidationRequestedEventArgs args)
    {
        messageStore?.Clear();

        try
        {
            _ = new Email(Model.Email);
        }
        catch
        {
            messageStore?.Add(() => Model.Email, "Enter valid email");
        }
        try
        {
            _ = new BankAccount(Model.BankAccount);
        }
        catch
        {
            messageStore?.Add(() => Model.BankAccount, "Enter valid Bank Account");
        }
        
       
    }

    private class CustomerCreateModel 
    {
        public string FirstName { get;  set; }
        public string LastName { get;  set; }
        public string BankAccount { get;  set; }
        public DateTime DateOfBirth { get; set; } = DateTime.Now;
        public string PhoneNumber { get;  set; }
        public string Email { get;  set; }

    }

    public void Dispose()
    {
        if (editContext is not null)
        {
            editContext.OnValidationRequested -= HandleValidationRequested;
        }
    }
}