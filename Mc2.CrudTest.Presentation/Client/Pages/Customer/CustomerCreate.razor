<!-- CreateCustomer.razor -->
@page "/create-customer"
@using System.ComponentModel.DataAnnotations
@using Mc2.CrudTest.Presentation.Shared.ValueObjects
@inject HttpClient Http

<h3>Create New Customer</h3>

<EditForm Model="@_newCustomer" OnValidSubmit="CreateCustomer">
    <DataAnnotationsValidator />
    <p class="danger">@_errorMessage</p>
    <div class="form-group">
        <label for="firstName">First Name</label>
        <InputText id="firstName" @bind-Value="_newCustomer.FirstName" class="form-control" />
        <ValidationMessage For="@(() => _newCustomer.FirstName)" />
    </div>
    <div class="form-group">
        <label for="lastName">Last Name</label>
        <InputText id="lastName" @bind-Value="_newCustomer.LastName" class="form-control" />
        <ValidationMessage For="@(() => _newCustomer.FirstName)" />
    </div>
    <div class="form-group">
        <label for="email">Email</label>
        <InputText id="email" @bind-Value="_newCustomer.Email" class="form-control" />
        <ValidationMessage For="@(() => _newCustomer.Email)" />
    </div>
    <div class="form-group">
        <label for="phoneNumber">Phone Number</label>
        <InputText id="phoneNumber" @bind-Value="_newCustomer.PhoneNumber" class="form-control" />
        <ValidationMessage For="@(() => _newCustomer.PhoneNumber)" />
    </div>
    <div class="form-group">
        <label for="dateOfBirth">DateOfBirth</label>
        <InputText id="dateOfBirth" @bind-Value="_newCustomer.DateOfBirth" class="form-control" />
        <ValidationMessage For="@(() => _newCustomer.DateOfBirth)" />
    </div>

  <button type="submit" class="btn btn-primary">Create</button>
</EditForm>

@code {
    private CustomerCreateModel _newCustomer = new CustomerCreateModel();
    private string _errorMessage = "";
    private async Task CreateCustomer()
    {
        try
        {
            bool validateAllProperties = false;
            var result = new List<ValidationResult>();
            var isValid = Validator.TryValidateObject(_newCustomer, new ValidationContext(_newCustomer, null, null), 
                result, validateAllProperties);

          if(isValid)  
            await Http.PostAsJsonAsync("Customer/Customer", _newCustomer);
            // Redirect to customer list or show success message
        }
        
        catch (Exception ex)
        {
            _errorMessage += "An error has been occured. Please try again later.";
        }
    }

    private class CustomerCreateModel : IValidatableObject
    {
        public string FirstName { get;  set; }
        public string LastName { get;  set; }
        public string BankAccount { get;  set; }
        public string DateOfBirth { get;  set; }
        public string PhoneNumber { get;  set; }
        public string Email { get;  set; }


        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            var results = new List<ValidationResult>();
          
                try
                {
                    _ = new Email(this.Email);
                }catch
                {
                    results.Add(new ValidationResult("Enter valid email"));
                }
                try
                {
                    _ = new BankAccount(this.BankAccount);
                }catch
                {
                    results.Add(new ValidationResult("Enter valid Bank Account"));
                }
          
            return results;
        }
    }
}